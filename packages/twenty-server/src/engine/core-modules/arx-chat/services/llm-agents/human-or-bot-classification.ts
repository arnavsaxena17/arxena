import { WorkspaceQueryService } from "src/engine/core-modules/workspace-modifications/workspace-modifications.service";

export class HumanLikeLLM{
  constructor( private readonly workspaceQueryService: WorkspaceQueryService ) {}


 async  checkIfResponseMessageSoundsHumanLike(responseMessage:{content:string|null}, apiToken){
    let responseMessageType :string = "seemsHumanMessage"

    try{
      console.log("Going to check if response message sounds human like or not")
      console.log("the response message is actually:", responseMessage?.content)
      const workspaceId = await this.workspaceQueryService.getWorkspaceIdFromToken(apiToken);
      const { openAIclient } = await this.workspaceQueryService.initializeLLMClients(workspaceId);
      const modelName = 'gpt-4o';
      if (responseMessage?.content != null && responseMessage?.content != "" ){
        const checkBotTypeMessages = [{ role: 'system', content: 
          `You are an expert at classifying sentences from a conversation into whether they sound human or bot like. 
          If the sentence has words wrapped between asterisks ** or has words wrapped in square brackets like [share_jd], then it is generated by a bot and return 'yes'.  
          If the sentence has words like I am updating your profile or a summary of previous chats, then it is generated by a bot and return 'yes'. 
          If the sentence has phrases like which that do not sound not direct conversations a recruiter, then it is generated by a bot and return 'yes'.
          Return only either 'yes' or 'no'. 
          Return in the json format of  {'isLikeBot':'no'}. No explanation necessary`
        }, 
          {role:'user', content:responseMessage.content}];
        // @ts-ignore

        const response = await openAIclient.chat.completions.create({ model: modelName, messages: checkBotTypeMessages, response_format:{ type: "json_object" }, });
        const LLMMessage:string =  response.choices[0].message.content || ""
        console.log("The BOT MESSAGE SOUNDS like ::::",response.choices[0].message.content)
        if (LLMMessage==="" ){
          responseMessageType = "seemsHumanMessage"
        } else {
          const isLikeBot = JSON.parse(LLMMessage)["isLikeBot"]
          if (isLikeBot === "no" || isLikeBot === "No" ){
            responseMessageType = "seemsHumanMessage"
          }
          else if (isLikeBot === "yes" || isLikeBot === "Yes" ){
            console.log("THe message does sound like a bot:", responseMessage.content)
            responseMessageType = "seemsBotMessage"
          }
          console.log("Check bot response yes/ no:",isLikeBot)
        }
        console.log("Finally response message type  ",responseMessageType )
      }
      else{
        console.log("REsponse message is either null or is empty string", responseMessage?.content)
        responseMessageType = "seemsHumanMessage"
      }
    }
    catch (error){
      console.log("Error in checkIfResponseMessageSoundsHumanLike:", error)
      console.log("responseMessage Type to check if HUman Message has been created is an error:", responseMessageType)
      responseMessageType = "seemsHumanMessage"
    }
    return responseMessageType
  }

}